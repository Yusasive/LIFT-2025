service: auth-service

frameworkVersion: '4'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-1'}
  vpc:
    subnetIds:
      - ${ssm:/litf-${opt:stage, 'dev'}/subnet1-Id}
      - ${ssm:/litf-${opt:stage, 'dev'}/subnet2-Id}
    securityGroupIds:
      - ${ssm:/litf-${opt:stage, 'dev'}/security-group-Id}
  httpApi:
    cors:
      allowedOrigins:
        - ${ssm:/litf-${opt:stage, 'dev'}/client-ui}
        - ${ssm:/litf-${opt:stage, 'dev'}/admin-ui}
        - ${ssm:/litf-${opt:stage, 'dev'}/base-url}
      allowedMethods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
      allowedHeaders:
        - Content-Type
        - Authorization
        - X-Amz-Date
        - X-Api-Key
        - X-Amz-Security-Token
        - X-Requested-With
      allowCredentials: true
  environment:
    DB_HOST: ${ssm:/litf-${opt:stage, 'dev'}/db-host}
    DB_PORT: ${ssm:/litf-${opt:stage, 'dev'}/db-port}
    DB_NAME: ${ssm:/litf-${opt:stage, 'dev'}/auth-service/db-name}
    DB_USER: ${ssm:/litf-${opt:stage, 'dev'}/db-user}
    DB_PASSWORD: ${ssm:/litf-${opt:stage, 'dev'}/db-pass}
    APP_SERVICE_SECRET: ${ssm:/litf-${opt:stage, 'dev'}/auth-service/app-secret}
    USER_SERVICE_URL: ${ssm:/litf-${opt:stage, 'dev'}/user-service/base-url}
    INTERNAL_SERVICE_KEY: ${ssm:/litf-${opt:stage, 'dev'}/internal-key}
    NODE_ENV: ${opt:stage, 'dev'}
    ALLOWED_ORIGINS: ${ssm:/litf-${opt:stage, 'dev'}/allowed-origins}
    COOKIE_DOMAIN: ${ssm:/litf-${opt:stage, 'dev'}/cookie-domain}
    API_DOMAIN_NAME: ${ssm:/litf-${opt:stage, 'dev'}/base-domain}

plugins:
  - serverless-offline

functions:
  internal:
    handler: app/handlers/internalHandler.handler
    events:
      - httpApi:
          path: /internal
          method: post

  getVerificationToken:
    handler: app/handlers/authHandler.handler
    events:
      - httpApi:
          path: /auth/verification-token
          method: get

  verifyCode:
    handler: app/handlers/authHandler.handler
    events:
      - httpApi:
          path: /auth/verify-code
          method: post

  createRole:
    handler: app/handlers/authHandler.protectedHandler
    events:
      - httpApi:
          path: /roles
          method: post

  getRoles:
    handler: app/handlers/authHandler.protectedHandler
    events:
      - httpApi:
          path: /roles
          method: get

  getRoleById:
    handler: app/handlers/authHandler.protectedHandler
    events:
      - httpApi:
          path: /roles/{id}
          method: get

  updateRole:
    handler: app/handlers/authHandler.protectedHandler
    events:
      - httpApi:
          path: /roles/{id}
          method: put

  deleteRole:
    handler: app/handlers/authHandler.protectedHandler
    events:
      - httpApi:
          path: /roles/{id}
          method: delete

  getPermissions:
    handler: app/handlers/authHandler.protectedHandler
    events:
      - httpApi:
          path: /permissions
          method: get

custom:
  serverless-offline:
    httpPort: 4000
    lambdaPort: 3000
    host: 0.0.0.0 

resources:
  Resources:
    AuthAPIMapping:
      Type: AWS::ApiGatewayV2::ApiMapping
      Properties:
        ApiId: ${cf:${self:service}-${sls:stage}.HttpApiId}
        DomainName: ${self:provider.environment.API_DOMAIN_NAME}
        Stage: '$default'
        ApiMappingKey: auth