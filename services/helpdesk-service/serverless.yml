# File: services/helpdesk-service/serverless.yml

service: helpdesk-service

frameworkVersion: "4"

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  httpApi:
    cors:
      allowedOrigins:
        - http://localhost:3010
        - http://localhost:3000
      allowedMethods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
      allowedHeaders:
        - Content-Type
        - Authorization
        - X-Amz-Date
        - X-Api-Key
        - X-Amz-Security-Token
        - X-Requested-With
      allowCredentials: true
  environment:
    DB_HOST: ${env:DB_HOST, 'localhost'}
    DB_PORT: ${env:DB_PORT, '5433'}
    DB_NAME: ${env:DB_NAME, 'litf_db'}
    DB_USER: ${env:DB_USER, 'root'}
    DB_PASSWORD: ${env:DB_PASSWORD, 'root'}
    NODE_ENV: ${env:NODE_ENV, 'development'}

plugins:
  - serverless-offline

functions:
  # ==========================================
  # GEOLOCATION FUNCTIONS
  # ==========================================
  getExhibitorLocation:
    handler: app/handlers/geolocationHandler.getExhibitorLocation
    events:
      - httpApi:
          path: /geolocation/exhibitors/{id}
          method: get

  findNearbyExhibitors:
    handler: app/handlers/geolocationHandler.findNearbyExhibitors
    events:
      - httpApi:
          path: /geolocation/nearby
          method: post

  # ==========================================
  # FAQ FUNCTIONS
  # ==========================================
  queryFAQ:
    handler: app/handlers/faqHandler.queryFAQ
    events:
      - httpApi:
          path: /faq/query
          method: post

  getFAQs:
    handler: app/handlers/faqHandler.getFAQs
    events:
      - httpApi:
          path: /faq
          method: get

  getFAQById:
    handler: app/handlers/faqHandler.getFAQById
    events:
      - httpApi:
          path: /faq/{id}
          method: get

  createFAQ:
    handler: app/handlers/faqHandler.createFAQ
    events:
      - httpApi:
          path: /admin/faq
          method: post

  updateFAQ:
    handler: app/handlers/faqHandler.updateFAQ
    events:
      - httpApi:
          path: /admin/faq/{id}
          method: put

  deleteFAQ:
    handler: app/handlers/faqHandler.deleteFAQ
    events:
      - httpApi:
          path: /admin/faq/{id}
          method: delete

  # ==========================================
  # HERO SECTION FUNCTIONS
  # ==========================================
  getHeroSections:
    handler: app/handlers/heroSectionHandler.getHeroSections
    events:
      - httpApi:
          path: /hero-sections
          method: get

  createHeroSection:
    handler: app/handlers/heroSectionHandler.createHeroSection
    events:
      - httpApi:
          path: /admin/hero-sections
          method: post

  updateHeroSection:
    handler: app/handlers/heroSectionHandler.updateHeroSection
    events:
      - httpApi:
          path: /admin/hero-sections/{id}
          method: put

  deleteHeroSection:
    handler: app/handlers/heroSectionHandler.deleteHeroSection
    events:
      - httpApi:
          path: /admin/hero-sections/{id}
          method: delete

  # ==========================================
  # MEDIA LIBRARY FUNCTIONS
  # ==========================================
  getMediaFiles:
    handler: app/handlers/mediaHandler.getMediaFiles
    events:
      - httpApi:
          path: /media
          method: get

  uploadMedia:
    handler: app/handlers/mediaHandler.uploadMedia
    events:
      - httpApi:
          path: /admin/media/upload
          method: post

  deleteMedia:
    handler: app/handlers/mediaHandler.deleteMedia
    events:
      - httpApi:
          path: /admin/media/{id}
          method: delete

  # ==========================================
  # SURVEY FUNCTIONS
  # ==========================================
  getSurveys:
    handler: app/handlers/surveyHandler.getSurveys
    events:
      - httpApi:
          path: /surveys
          method: get

  createSurvey:
    handler: app/handlers/surveyHandler.createSurvey
    events:
      - httpApi:
          path: /admin/surveys
          method: post

  submitSurveyResponse:
    handler: app/handlers/surveyHandler.submitSurveyResponse
    events:
      - httpApi:
          path: /surveys/{id}/responses
          method: post

  getSurveyAnalytics:
    handler: app/handlers/surveyHandler.getSurveyAnalytics
    events:
      - httpApi:
          path: /admin/surveys/{id}/analytics
          method: get

  # ==========================================
  # CONTENT SECTION FUNCTIONS
  # ==========================================
  getContentSections:
    handler: app/handlers/contentSectionHandler.getContentSections
    events:
  #     - httpApi:
  #         path: /content-sections
  #         method: get

  # createContentSection:
  #   handler: app/handlers/contentSectionHandler.createContentSection
  #   events:
  #     - httpApi:
  #         path: /admin/content-sections
  #         method: post

  # updateContentSection:
  #   handler: app/handlers/contentSectionHandler.updateContentSection
  #   events:
  #     - httpApi:
  #         path: /admin/content-sections/{id}
  #         method: put

  # deleteContentSection:
  #   handler: app/handlers/contentSectionHandler.deleteContentSection
  #   events:
  #     - httpApi:
  #         path: /admin/content-sections/{id}
  #         method: delete

  # ==========================================
  # CHAT FUNCTIONS
  # ==========================================
  initChat:
    handler: app/handlers/chatHandler.initChat
    events:
      - httpApi:
          path: /chat/init
          method: post

  sendMessage:
    handler: app/handlers/chatHandler.sendMessage
    events:
      - httpApi:
          path: /chat/message
          method: post

  getChatSessions:
    handler: app/handlers/chatHandler.getChatSessions
    events:
      - httpApi:
          path: /admin/chat/sessions
          method: get

  getChatMessages:
    handler: app/handlers/chatHandler.getChatMessages
    events:
      - httpApi:
          path: /admin/chat/sessions/{id}/messages
          method: get

  # ==========================================
  # DOCUMENTATION FUNCTIONS
  # ==========================================
  getDocumentation:
    handler: app/handlers/documentationHandler.getDocumentation
    events:
      - httpApi:
          path: /docs/{category}
          method: get

  searchDocs:
    handler: app/handlers/documentationHandler.searchDocs
    events:
      - httpApi:
          path: /docs/search
          method: post

  getDocumentationIndex:
    handler: app/handlers/documentationHandler.getDocumentationIndex
    events:
      - httpApi:
          path: /docs
          method: get

custom:
  serverless-offline:
    httpPort: 4003
    lambdaPort: 3003
    host: 0.0.0.0
